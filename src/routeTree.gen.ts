/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as MerchantsIndexImport } from './routes/merchants/index'
import { Route as LoginIndexImport } from './routes/login/index'
import { Route as OrdersIndexImport } from './routes/Orders/index'
import { Route as FulfillmentsOutboundPickingJobIndexImport } from './routes/fulfillments/outbound/picking-job/index'
import { Route as FulfillmentsInboundStoragesIndexImport } from './routes/fulfillments/inbound/storages/index'
import { Route as FulfillmentsInboundStorageLabelsIndexImport } from './routes/fulfillments/inbound/storage-labels/index'
import { Route as FulfillmentsInboundOrdersIndexImport } from './routes/fulfillments/inbound/orders/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const MerchantsIndexRoute = MerchantsIndexImport.update({
  path: '/merchants/',
  getParentRoute: () => rootRoute,
} as any)

const LoginIndexRoute = LoginIndexImport.update({
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const OrdersIndexRoute = OrdersIndexImport.update({
  path: '/Orders/',
  getParentRoute: () => rootRoute,
} as any)

const FulfillmentsOutboundPickingJobIndexRoute =
  FulfillmentsOutboundPickingJobIndexImport.update({
    path: '/fulfillments/outbound/picking-job/',
    getParentRoute: () => rootRoute,
  } as any)

const FulfillmentsInboundStoragesIndexRoute =
  FulfillmentsInboundStoragesIndexImport.update({
    path: '/fulfillments/inbound/storages/',
    getParentRoute: () => rootRoute,
  } as any)

const FulfillmentsInboundStorageLabelsIndexRoute =
  FulfillmentsInboundStorageLabelsIndexImport.update({
    path: '/fulfillments/inbound/storage-labels/',
    getParentRoute: () => rootRoute,
  } as any)

const FulfillmentsInboundOrdersIndexRoute =
  FulfillmentsInboundOrdersIndexImport.update({
    path: '/fulfillments/inbound/orders/',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Orders/': {
      id: '/Orders/'
      path: '/Orders'
      fullPath: '/Orders'
      preLoaderRoute: typeof OrdersIndexImport
      parentRoute: typeof rootRoute
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/merchants/': {
      id: '/merchants/'
      path: '/merchants'
      fullPath: '/merchants'
      preLoaderRoute: typeof MerchantsIndexImport
      parentRoute: typeof rootRoute
    }
    '/fulfillments/inbound/orders/': {
      id: '/fulfillments/inbound/orders/'
      path: '/fulfillments/inbound/orders'
      fullPath: '/fulfillments/inbound/orders'
      preLoaderRoute: typeof FulfillmentsInboundOrdersIndexImport
      parentRoute: typeof rootRoute
    }
    '/fulfillments/inbound/storage-labels/': {
      id: '/fulfillments/inbound/storage-labels/'
      path: '/fulfillments/inbound/storage-labels'
      fullPath: '/fulfillments/inbound/storage-labels'
      preLoaderRoute: typeof FulfillmentsInboundStorageLabelsIndexImport
      parentRoute: typeof rootRoute
    }
    '/fulfillments/inbound/storages/': {
      id: '/fulfillments/inbound/storages/'
      path: '/fulfillments/inbound/storages'
      fullPath: '/fulfillments/inbound/storages'
      preLoaderRoute: typeof FulfillmentsInboundStoragesIndexImport
      parentRoute: typeof rootRoute
    }
    '/fulfillments/outbound/picking-job/': {
      id: '/fulfillments/outbound/picking-job/'
      path: '/fulfillments/outbound/picking-job'
      fullPath: '/fulfillments/outbound/picking-job'
      preLoaderRoute: typeof FulfillmentsOutboundPickingJobIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Orders': typeof OrdersIndexRoute
  '/login': typeof LoginIndexRoute
  '/merchants': typeof MerchantsIndexRoute
  '/fulfillments/inbound/orders': typeof FulfillmentsInboundOrdersIndexRoute
  '/fulfillments/inbound/storage-labels': typeof FulfillmentsInboundStorageLabelsIndexRoute
  '/fulfillments/inbound/storages': typeof FulfillmentsInboundStoragesIndexRoute
  '/fulfillments/outbound/picking-job': typeof FulfillmentsOutboundPickingJobIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Orders': typeof OrdersIndexRoute
  '/login': typeof LoginIndexRoute
  '/merchants': typeof MerchantsIndexRoute
  '/fulfillments/inbound/orders': typeof FulfillmentsInboundOrdersIndexRoute
  '/fulfillments/inbound/storage-labels': typeof FulfillmentsInboundStorageLabelsIndexRoute
  '/fulfillments/inbound/storages': typeof FulfillmentsInboundStoragesIndexRoute
  '/fulfillments/outbound/picking-job': typeof FulfillmentsOutboundPickingJobIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Orders/': typeof OrdersIndexRoute
  '/login/': typeof LoginIndexRoute
  '/merchants/': typeof MerchantsIndexRoute
  '/fulfillments/inbound/orders/': typeof FulfillmentsInboundOrdersIndexRoute
  '/fulfillments/inbound/storage-labels/': typeof FulfillmentsInboundStorageLabelsIndexRoute
  '/fulfillments/inbound/storages/': typeof FulfillmentsInboundStoragesIndexRoute
  '/fulfillments/outbound/picking-job/': typeof FulfillmentsOutboundPickingJobIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Orders'
    | '/login'
    | '/merchants'
    | '/fulfillments/inbound/orders'
    | '/fulfillments/inbound/storage-labels'
    | '/fulfillments/inbound/storages'
    | '/fulfillments/outbound/picking-job'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Orders'
    | '/login'
    | '/merchants'
    | '/fulfillments/inbound/orders'
    | '/fulfillments/inbound/storage-labels'
    | '/fulfillments/inbound/storages'
    | '/fulfillments/outbound/picking-job'
  id:
    | '__root__'
    | '/'
    | '/Orders/'
    | '/login/'
    | '/merchants/'
    | '/fulfillments/inbound/orders/'
    | '/fulfillments/inbound/storage-labels/'
    | '/fulfillments/inbound/storages/'
    | '/fulfillments/outbound/picking-job/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  MerchantsIndexRoute: typeof MerchantsIndexRoute
  FulfillmentsInboundOrdersIndexRoute: typeof FulfillmentsInboundOrdersIndexRoute
  FulfillmentsInboundStorageLabelsIndexRoute: typeof FulfillmentsInboundStorageLabelsIndexRoute
  FulfillmentsInboundStoragesIndexRoute: typeof FulfillmentsInboundStoragesIndexRoute
  FulfillmentsOutboundPickingJobIndexRoute: typeof FulfillmentsOutboundPickingJobIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OrdersIndexRoute: OrdersIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  MerchantsIndexRoute: MerchantsIndexRoute,
  FulfillmentsInboundOrdersIndexRoute: FulfillmentsInboundOrdersIndexRoute,
  FulfillmentsInboundStorageLabelsIndexRoute:
    FulfillmentsInboundStorageLabelsIndexRoute,
  FulfillmentsInboundStoragesIndexRoute: FulfillmentsInboundStoragesIndexRoute,
  FulfillmentsOutboundPickingJobIndexRoute:
    FulfillmentsOutboundPickingJobIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Orders/",
        "/login/",
        "/merchants/",
        "/fulfillments/inbound/orders/",
        "/fulfillments/inbound/storage-labels/",
        "/fulfillments/inbound/storages/",
        "/fulfillments/outbound/picking-job/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Orders/": {
      "filePath": "Orders/index.tsx"
    },
    "/login/": {
      "filePath": "login/index.tsx"
    },
    "/merchants/": {
      "filePath": "merchants/index.tsx"
    },
    "/fulfillments/inbound/orders/": {
      "filePath": "fulfillments/inbound/orders/index.tsx"
    },
    "/fulfillments/inbound/storage-labels/": {
      "filePath": "fulfillments/inbound/storage-labels/index.tsx"
    },
    "/fulfillments/inbound/storages/": {
      "filePath": "fulfillments/inbound/storages/index.tsx"
    },
    "/fulfillments/outbound/picking-job/": {
      "filePath": "fulfillments/outbound/picking-job/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
